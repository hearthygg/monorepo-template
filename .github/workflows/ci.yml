name: CI/CD Pipeline

# 触发条件：当推送到 master 分支
# 或有针对 master 分支的拉取请求时触发 这对于在合并代码之前进行自动化测试和检查非常有用，以确保代码质量。
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # 作业（jobs）是相互独立的，每个作业在一个全新的环境中运行。因此，即使你在一个作业中已经检出代码并安装了依赖，在另一个作业中仍然需要重复这些步骤，因为每个作业的环境是隔离的。
  build:
    # 使用最新的 Ubuntu 运行器
    runs-on: ubuntu-latest

    steps:
    # 步骤1：检出代码
    # 使用 GitHub 提供的 actions/checkout 动作来检出（checkout）你的代码仓库。
    # 具体来说，它会将你的代码从 GitHub 仓库检出到 GitHub Actions 运行器的工作目录中，以便后续步骤可以访问和操作这些代码
    - name: Checkout code
      uses: actions/checkout@v2

    # 步骤2：设置 Node.js 环境
    # 这一步是使用 GitHub 提供的 actions/setup-node 动作来设置 Node.js 环境。
    # 它会在 GitHub Actions 运行器上安装指定版本的 Node.js，以便后续步骤可以使用 Node.js 运行命令
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.15.0'

    # 步骤3：安装 pnpm
    - name: Install pnpm
      run: npm install -g pnpm

    # 步骤4：安装依赖
    - name: Install dependencies
      run: pnpm install

    # 步骤5：运行代码检查
    # - name: Lint code
    #   run: pnpm run lint

    # 步骤6：运行测试
    # - name: Run tests
    #   run: pnpm run test

    # 步骤7：构建项目
    - name: Build project
      run: pnpm run build

  deploy:
    # 部署作业依赖于构建作业
    runs-on: ubuntu-latest
    # 这意味着 deploy 作业只有在 build 作业成功完成后才会执行。
    needs: build
    # 只在master 分支上运行
    if: github.ref == 'refs/heads/master'

    steps:
    # 步骤1：检出代码
    - name: Checkout code
      uses: actions/checkout@v2

    # 步骤2：设置 Node.js 环境
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.15.0'

    # 步骤3：安装 pnpm
    - name: Install pnpm
      run: npm install -g pnpm

    # 步骤4：安装依赖
    - name: Install dependencies
      run: pnpm install

    # 步骤5：构建项目
    - name: Build project
      run: pnpm run build

    # 步骤6：部署到 GitHub Pages
    # 使用 peaceiris/actions-gh-pages 动作的第三个主要版本。这个动作专门用于将项目部署到 GitHub Pages。
    # github_token: 使用 GitHub 提供的 MY_TOKEN，它是一个自动生成的令牌，用于授权 GitHub Actions 进行各种操作，包括推送到 GitHub Pages。这个令牌存储在 GitHub 仓库的 secrets 中，确保安全性。
    # publish_dir: ./dist：指定要部署的目录。在这个例子中，./dist 是构建输出目录，包含了要部署到 GitHub Pages 的静态文件。
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.MY_TOKEN }}
        publish_dir: ./dist